(function(s,n){typeof exports=="object"&&typeof module<"u"?n(exports,require("fs-extra"),require("async-mutex")):typeof define=="function"&&define.amd?define(["exports","fs-extra","async-mutex"],n):(s=typeof globalThis<"u"?globalThis:s||self,n(s.storage_helper={},s.fs,s.asyncMutex))})(this,function(s,n,u){"use strict";function l(i){const e=Object.create(null,{[Symbol.toStringTag]:{value:"Module"}});if(i){for(const t in i)if(t!=="default"){const a=Object.getOwnPropertyDescriptor(i,t);Object.defineProperty(e,t,a.get?a:{enumerable:!0,get:()=>i[t]})}}return e.default=i,Object.freeze(e)}const r=l(n),o={},f={array:()=>Array(),string:()=>String(),number:()=>Number()};class d{mutex=new u.Mutex;scheme;constructor(e){this.scheme=e}async get_db(){const e=o.resolve("database.json");await r.ensureFile(e);try{return JSON.parse(await r.readFile(e,"utf8"))}catch{}return Object()}async save_db(e){await this.mutex.runExclusive(async()=>{const t=o.resolve("database.json"),a=o.join(t,"..","database_bak.json");await r.pathExists(t)&&await r.copyFile(t,a),await r.writeFile(t,JSON.stringify(e),{flag:"w+"});try{JSON.parse(await r.readFile(t,"utf8"))}catch(c){console.error("rollback",c.message??c.toString()),await r.move(a,t,{overwrite:!0})}})}init_empty_value(e){return f[this.scheme[e]]()}async get_value(e){let a=(await this.get_db())[e];return a==null&&(a=this.init_empty_value(e)),a}async set_value(e,t){const a=await this.get_db();a[e]=t,await this.save_db(a)}}s.storage_helper=d,Object.defineProperty(s,Symbol.toStringTag,{value:"Module"})});
